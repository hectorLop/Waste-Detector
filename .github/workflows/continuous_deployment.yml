name: Deploy to Amazon ECS

on:
  push:
    paths:
      - "deployment/**"

jobs:
  deployment:
    name: "Deployment"
    runs-on: "ubuntu-latest"
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install aws-cli
        id: install-aws-cli
        uses: unfor19/install-aws-cli-action@v1
        with:
          version: 2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          FRONTEND_REPOSITORY: ${{ secrets.FRONTEND_REPOSITORY }}
          BACKEND_REPOSITORY: ${{ secrets.BACKEND_REPOSITORY }}
        run: |
           cd deployment
           docker build -t $ECR_REGISTRY/$FRONTEND_REPOSITORY -f frontend.Dockerfile .
           docker push $ECR_REGISTRY/$FRONTEND_REPOSITORY

           docker build -t $ECR_REGISTRY/$BACKEND_REPOSITORY -f backend.Dockerfile .
           docker push $ECR_REGISTRY/$BACKEND_REPOSITORY

           echo "::set-output name=frontend-image::$ECR_REGISTRY/$FRONTEND_REPOSITORY"
           echo "::set-output name=backend-image::$ECR_REGISTRY/$BACKEND_REPOSITORY"

      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition WasteDetector --query taskDefinition > task-definition.json

          #- name: Render task definition for frontend
          #  id: render-frontend
          #  uses: aws-actions/amazon-ecs-render-task-definition@v1
          #  with:
          #    task-definition: task-definition.json
          #    container-name: frontend
          #    image: $${{ secrets.ECR_REGISTRY}}/$${{ secrets.FRONTEND_REPOSITORY }}
          #    #image: $${{ steps.build-image.outputs.frontend-image}}

          #- name: Render task definition for frontend
          #  id: render-backend
          #  uses: aws-actions/amazon-ecs-render-task-definition@v1
          #  with:
          #    task-definition: task-definition.json
          #    container-name: backend
          #    image: $${{ steps.build-image.outputs.backend-image }}

      - name: Deploy to Amazon ECS service
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: task-definition.json
          #task-definition: ${{ steps.render-backend.outputs.task-definition }}
          service: WasteDetector 
          cluster: WasteDetectorCluster
          wait-for-service-stability: true

         #- name: Deploy on ECSk
         #  env:
         #    AWS_ACCESS_KEY_ID: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
         #    AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
         #    AWS_REGION: ${{ secrets.AWS_REGION }}
         #  run: |
         #    sudo curl -Lo /usr/local/bin/ecs-cli https://amazon-ecs-cli.s3.amazonaws.com/ecs-cli-linux-amd64-latest
         #    sudo chmod +x /usr/local/bin/ecs-cli 
         #    cd deployment
         #    #aws ecs describe-clusters --cluster WasteDetectorCluster
         #    ecs-cli compose --project-name WasteDetector service up --create-log-groups --cluster-config WasteDetectorCluster

          #- name: Deploy Amazon ECS task definition
          #  uses: aws-actions/amazon-ecs-deploy-task-definition@v1
          #  with:
          #    task-definition: deployment/ecs-params.yml
          #    service: WasteDetector
          #    cluster: WasteDetector4
          #    wait-for-service-stability: true 
